import json
import requests
import os
import urllib3

from utopia_manager import UtopiaManager
from datetime import datetime

# Configure logging
from logger import log_message, log_message_short, log_message_whole

# Get the filename of the current script
filename = os.path.basename(__file__)

# disable warnings
urllib3.disable_warnings()


class PowercodeManager:
    def __init__(self, config_file="config.json"):
        self.config = self.get_config(config_file)
        self.powercode_management_url = self.config["POWERCODE_MANAGEMENT_URL"]
        self.powercode_api_key = self.config["POWERCODE_API_KEY"]
        self.utopia_api_key = self.config["UTOPIA_API_KEY"]
        self.utopia_manager = UtopiaManager()

    @staticmethod
    def get_config(config_file):
        config_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), config_file)
        with open(config_path) as config_file:
            config = json.load(config_file)
        return config

    def create_equipment(self, customer_id, name, mac_address, address_range_v4=10228, device_type=58,
                         device_category=11, snmp_community=None, snmp_version=1, status_check=None, ):
        url = self.powercode_management_url + ':444/api/1/index.php'

        now = datetime.now()
        formatted_now = now.strftime("%H:%M:%S %m-%d-%Y")

        payload = {
            'apiKey': self.powercode_api_key,
            'action': 'createEquipment',
            'customerID': int(customer_id),
            'name': name,
            'deviceCategory': device_category,
            'deviceType': device_type,
            'macAddress': mac_address,
            'addressRangev4': address_range_v4,
            'statusCheck': status_check,
            'snmpCommunity': snmp_community,
            'snmpVersion': snmp_version,
            'owner': 1,
            'notes': f"Equipment generated by Dynamic Lease Runner (DLR) - {formatted_now}"
        }

        try:
            response = requests.post(url, data=payload, verify=False)

            log_message_whole("api", f"API call to Powercode: {url} {payload}", filename)

            response.raise_for_status()
            data = response.json()

            if 'equipmentID' in data:
                equipment_id = data['equipmentID']
                log_message('info',f"Equipment created successfully. Equipment ID: {equipment_id}", filename)
                return equipment_id
            else:
                log_message('error',"Failed to create equipment.", filename)
                log_message('error', data, filename)
                return None
        except requests.exceptions.RequestException as e:
            log_message('error',f"Error: {e}", filename)
            return None

    def read_customer(self, customer_id):
        url = self.powercode_management_url + ':444/api/1/index.php'

        payload = {
            "apiKey": self.powercode_api_key,
            "action": "readCustomer",
            "customerID": customer_id
        }

        try:
            response = requests.post(url, json=payload, verify=False)
            response_data = response.json()

            log_message_whole('api', f"API call to Powercode: {url} {payload}", filename)
            log_message_whole('api', f"API response from Powercode: {response_data}", filename)

            customer = response_data.get("customer")
            if customer:
                return customer
            else:
                error_msg = "Failed to fetch customer data."
                return error_msg

        except requests.exceptions.RequestException as e:
            return e

    def read_equipment(self, equipment_id):
        url = self.powercode_management_url + ':444/api/1/index.php'

        payload = {
            "apiKey": self.powercode_api_key,
            "action": "readEquipment",
            "equipmentID": equipment_id
        }

        try:
            response = requests.post(url, json=payload, verify=False)
            response_data = response.json()

            equipment = response_data.get("equipment")
            if equipment:
                return equipment
            else:
                print("Failed to fetch equipment data.")
                return None
        except requests.exceptions.RequestException as e:
            print("Error:", e)
            return None

    def get_customer_details(self, customer_id):
        url = self.powercode_management_url + ':444/api/1/index.php'

        payload = {
            "apiKey": self.powercode_api_key,
            "action": "readCustomer",
            "customerID": customer_id
        }

        try:
            response = requests.post(url, json=payload, verify=False)
            print("get_customer_details - response", response)

            response_data = response.json()

            # Extract customer details
            customer = response_data.get("customer")

            if customer:
                first_name = customer.get("firstName")
                last_name = customer.get("lastName")
                physicalStreet = customer.get("physicalStreet")
                physicalCity = customer.get("physicalCity")
                physicalState = customer.get("physicalState")

                return first_name, last_name, physicalStreet, physicalCity, physicalState

            return None
        except requests.exceptions.RequestException as e:
            print("Error:", e)

    def get_customer_equipment(self, customer_id):
        """
        The function will return the equipment  if successful,
        or None if there's an error or no equipment is found for the customer.
        :param customer_id:
        :return:
        """
        url = self.powercode_management_url + ':444/api/1/index.php'

        payload = {
            "apiKey": self.powercode_api_key,
            "action": "readCustomerEquipment",
            "customerID": customer_id
        }

        try:
            response = requests.post(url, json=payload, verify=False)
            response_data = response.json()
            equipment = response_data.get("equipment")
            equipment_ids = []

            if equipment:
                # # for item_id in equipment:
                # #     equipment_id = item_id['equipmentID']
                # #     equipment_ids.append(equipment_id)
                # return equipment_ids
                return equipment
            else:
                print("Failed to fetch customer equipment data.")
                return None
        except requests.exceptions.RequestException as e:
            print("Error:", e)
            return None

        # def createPCEquipment(customerID, macAddress, addressRangev4=10228, customer_name="", deviceCategory="Router",
        #                       deviceType="Customer Owned Equipment"):
        """
        Adding equipment to customer acc\
        addressRangev4 in real powercode is
        Need to find deviceCategory, deviceType, addressRangev4

        FROM REAL PC:
        deviceCategory =
        deviceType = 	Customer Router ID=58
        addressRangev4 =
        ID      Name
        10230   PUBLIC-CGNT162-VLAN-633-YF_Business
        10231   PUBLIC-CGNT163-VLAN-633-YF_Business

        10228	CGNAT-POOL1-VLAN-533-YF_Residential	100.80.0.2 - 100.80.7.252
        10229	CGNAT-POOL1-VLAN-633-YF_Business	100.80.8.2 - 100.80.15.252

        """

    def get_mac_address(self, equipment_id):
        equipment_data = self.read_equipment(equipment_id)
        if equipment_data:
            mac_address = equipment_data.get("MacAddress")
            return mac_address
        else:
            return None

    def get_customer_by_external_id(self, external_id):

        url = self.powercode_management_url + ':444/api/1/index.php'

        payload = {
            'apiKey': self.powercode_api_key,
            'action': 'readCustomer',
            'extAccountID': external_id,
        }

        try:
            response = requests.post(url, data=payload, verify=False)

            log_message_whole('api', f"API call to Powercode: {url} {payload}", filename)

            response_data = response.json()

            if response_data.get("statusCode") == 0:
                customer_info = response_data.get("customer")
                if customer_info and all(key in customer_info for key in (
                'companyName', 'firstName', 'lastName', 'status', 'customerId', 'extAccountID')):
                    log_message('info',
                        "\n"
                        f"Powercode customer. \n"
                        f"Customer id: {customer_info['customerId']}, \n"
                        f"Company Name: {customer_info['companyName']}, \n"
                        f"First Name:{customer_info['firstName']}, \n"
                        f"Last Name: {customer_info['lastName']}, \n"
                        f"Status: {customer_info['status']}, \n"
                        f"External ID: {customer_info['extAccountID']}"
                        "\n", filename)
                    return customer_info
                else:
                    log_message('warning',"Customer information is incomplete.", filename)
            else:
                message = response_data.get("message")
                log_message('error',f"Failed to find customer: {message}", filename)

        except requests.exceptions.RequestException as e:
            log_message('error',f"Error: {e}", filename)

        return False

        ### Sample respond:
        """
        {
            'message': 'Customer',
            'statusCode': 0,
            'customer': {
                         'customerId': '16337', - this
                         'companyName': 'Sid Williamson', - this
                         'firstName': 'Sid', - this
                         'lastName': 'Williamson',- this
                         'extAccountID': '716574', - this
                         'status': 'Lead', - this
                         'customerSecurityCode': '0',
                         'socialSecurityNumber': None,
                         'emailAddress': 'sidneypwilliamson@gmail.com',
                         'phone': {'Home': '4065796292'},
                         'customerPortalUsername': 'sidneypwilliamson@gmail.com',
                         'customerPortalPassword': '$2y$10$lAQEavI9T0q/KmFjxEm2D.rCk4Y9pIlHRak82VJj1RQcOT2UqH/He',
                         'physicalStreet': '405 S 5TH AVENUE',
                         'physicalAddress2': None,
                         'physicalCity': 'Bozeman',
                         'physicalState': 'MT',
                         'physicalZip': '59715',
                         'physicalLatitude': '45.6750353',
                         'physicalLongitude': '-111.0441624',
                         'billingStreet': '405 S 5TH AVENUE',
                         'billingAddress2': None,
                         'billingCity': 'Bozeman',
                         'billingState': 'MT',
                         'billingZip': '59715',
                         'billingLatitude': '45.6750353',
                         'billingLongitude': '-111.0441624',
                         'taxZoneId': '1', 'invoicePreference':
                         'No Invoice',
                         'billDay': '0',
                         'dueByDays': '0',
                         'prePayMonths': '1',
                         'gracePeriodDays': '10',
                         'poNumber': None,
                         'autoPayStatus': 0,
                         'currentBalance': '0.00',
                         'currentAmountDue': '0.00',
                         'pastDueBalance': '0.00'
                        }
        }
        """
    def update_equipment_needed(self, existing_equipment, first_name, last_name, mac_address):
        return (existing_equipment["name"] != f"{first_name} {last_name} - Cust RTR" or
                existing_equipment["macAddress"].lower() != mac_address.lower())

    def update_customer_extAccountID_by_ID(self, customer_id, external_id):
        url = self.powercode_management_url + ':444/api/1/index.php'

        payload = {
            "apiKey": self.powercode_api_key,
            "action": "updateCustomer",
            "customerID": customer_id,
            "extAccountID": external_id,
        }
        try:
            response = requests.post(url, data=payload, verify=True)
            response_data = response.json()

            log_message_whole('api', f"API Call: {url} {payload}", filename)

            # Get message from PC
            msg = response_data.get("message")
            if msg:
                return response_data

            return None
        except requests.exceptions.RequestException as e:
            log_message('error',f"Error: {e}", filename)

    def update_customer_status(self, customer_id):
        url = self.powercode_management_url + ':444/api/1/index.php'

        payload = {
            "apiKey": self.powercode_api_key,
            "action": "updateCustomerStatus",
            "customerID": customer_id,
            "status": "Active"
        }

        try:
            response = requests.post(url, json=payload, verify=False)
            response_data = response.json()

            # Get message from PC
            msg = response_data.get("message")
            if msg:
                # message = msg.get("message")
                log_message('info',f"Activating customer's account: {msg}", filename)
                return msg

            return None
        except requests.exceptions.RequestException as e:
            log_message('error',f"Error: {e}", filename)

    def update_equipment_mac(self, equipment, new_mac_address):
        equipment_id = equipment.get("equipmentID")
        return self.update_equipment(equipment_id, mac_address=new_mac_address)
    # TODO: get all equipment on account and return their ID

    def update_customer(self, customer_id, **kwargs):
        url = self.powercode_management_url + ':444/api/1/index.php'

        payload = {
            "apiKey": self.powercode_api_key,
            "action": "updateCustomer",
            "customerID": customer_id,
        }

        # Add specified fields to the payload
        for key, value in kwargs.items():
            if value is not None:  # Exclude None values
                payload[key] = value

        try:
            response = requests.post(url, data=payload, verify=True)
            response_data = response.json()

            # Log API call
            log_message_whole('api', f"API Call: {url} {payload}", filename)

            return response_data
        except requests.exceptions.RequestException as e:
            log_message('error',f"Error: {e}", filename)

    def update_equipment(self, equipment_id, name=None, device_category=None, device_type=None, mac_address=None,
                         ip_address=None, address_range_v4=None, status_check=None, snmp_community=None,
                         snmp_version=None, device_location=None, device_street=None, device_address2=None,
                         device_city=None, device_state=None, device_zip=None, automatically_geocode=None,
                         device_latitude=None, device_longitude=None, owner=None, notes=None, custom_field=None):
        """
        You can call this function with the appropriate parameters to update the equipment.
        :param equipment_id:
        :param name:
        :param device_category:
        :param device_type:
        :param mac_address:
        :param ip_address:
        :param address_range_v4:
        :param status_check:
        :param snmp_community:
        :param snmp_version:
        :param device_location:
        :param device_street:
        :param device_address2:
        :param device_city:
        :param device_state:
        :param device_zip:
        :param automatically_geocode:
        :param device_latitude:
        :param device_longitude:
        :param owner:
        :param notes:
        :param custom_field:
        :return:
        """
        url = self.powercode_management_url + ':444/api/1/index.php'

        payload = {
            "apiKey": self.powercode_api_key,
            "action": "updateEquipment",
            "equipmentID": equipment_id,
        }

        if name is not None:
            payload["name"] = name
        if device_category is not None:
            payload["deviceCategory"] = device_category
        if device_type is not None:
            payload["deviceType"] = device_type
        if mac_address is not None:
            payload["macAddress"] = mac_address
        if ip_address is not None:
            payload["ipAddress"] = ip_address
        if address_range_v4 is not None:
            payload["addressRangev4"] = address_range_v4
        if status_check is not None:
            payload["statusCheck"] = status_check
        if snmp_community is not None:
            payload["snmpCommunity"] = snmp_community
        if snmp_version is not None:
            payload["snmpVersion"] = snmp_version
        if device_location is not None:
            payload["deviceLocation"] = device_location
        if device_street is not None:
            payload["deviceStreet"] = device_street
        if device_address2 is not None:
            payload["deviceAddress2"] = device_address2
        if device_city is not None:
            payload["deviceCity"] = device_city
        if device_state is not None:
            payload["deviceState"] = device_state
        if device_zip is not None:
            payload["deviceZip"] = device_zip
        if automatically_geocode is not None:
            payload["automaticallyGeocode"] = automatically_geocode
        if device_latitude is not None:
            payload["deviceLatitude"] = device_latitude
        if device_longitude is not None:
            payload["deviceLongitude"] = device_longitude
        if owner is not None:
            payload["owner"] = owner
        if notes is not None:
            payload["notes"] = notes
        if custom_field is not None:
            payload["customField"] = custom_field

        try:
            response = requests.post(url, json=payload, verify=False)
            response_data = response.json()

            if response_data.get("statusCode") == 0:
                log_message('info',"Equipment updated successfully.", filename)
                return True
            else:
                message = response_data.get("message")
                log_message('error',f"Failed to update equipment: {message}", filename)
                return False
        except requests.exceptions.RequestException as e:
            log_message('error',f"Error: {e}", filename)
            return False

        # Find matching equipment in Powercode based on device type and category

    # def login_customer(self, username, password):
    #     url = self.powercode_management_url + ':444/api/1/index.php'
    #
    #     headers = {
    #         'Accept': 'application/json'
    #     }
    #
    #     payload = {
    #         'action': "customerLogin",
    #         'username': username,
    #         'password': password
    #     }
    #     response = requests.post(url, json=payload, headers=headers)
    #     if response.status_code == 200:
    #         try:
    #             json_response = response.json()
    #             if json_response.get('statusCode') == 0:
    #                 token = json_response.get('token')
    #                 customer_id = json_response.get('customerID')
    #                 print(f"Login Successful! Customer ID: {customer_id}")
    #                 return customer_id
    #             else:
    #                 message = json_response.get('message')
    #                 print(f"Login Failed: {message}")
    #         except json.JSONDecodeError:
    #             print(f"Failed to decode JSON response: {response.content}")
    #     else:
    #         print("Failed to connect to the API.")

    def delete_equipment(self, equipment_id):
        url = self.powercode_management_url + ':444/api/1/index.php'

        payload = {
            "apiKey": self.powercode_api_key,
            "action": "deleteEquipment",
            "equipmentID": equipment_id,
        }

        try:
            response = requests.post(url, json=payload, verify=False)
            response_data = response.json()

            if response_data.get("statusCode") == 0:
                log_message('info',f"Equipment {equipment_id} deleted successfully.", filename)
                return True
            else:
                message = response_data.get("message")
                log_message('error',f"Failed to delete equipment: {message}", filename)
                return False
        except requests.exceptions.RequestException as e:
            log_message('error',f"Error: {e}", filename)
            return False



    def find_matching_equipment(self, customer_id, mac_address, device_type, device_category):
        existing_equipment = self.get_customer_equipment(customer_id)
        if existing_equipment:
            return next((eq for eq in existing_equipment if eq["macAddress"].lower() == mac_address.lower() and
                         eq["deviceType"] == device_type and eq["deviceCategory"] == device_category), None)
        return None

    # Update MAC address of existing equipment

    # Password Reset
    def send_password_reset_email(self, username):
        endpoint = self.powercode_management_url + ':444/api/1/index.php'
        data = {
            "apiKey": self.powercode_api_key,
            "action": "customerForgotPassword",
            "username": username
        }

        try:
            response = requests.post(endpoint, data=data, verify=False)
            response.raise_for_status()  # Raise an error for bad responses (4xx, 5xx)

            result = response.status_code
            # Process the result as needed
            return result
        except requests.exceptions.RequestException as e:
            # Handle exceptions, e.g., connection errors
            print(f"Error: {e}")
            return None

    def search_customers(self, search_string):
        url = self.powercode_management_url + ':444/api/1/index.php'

        data = {
            "apiKey": self.powercode_api_key,
            "action": "searchCustomers",
            "searchString": search_string
        }

        try:
            response = requests.post(url, data, verify=False)
            response.raise_for_status()

            return response.json()
        except requests.exceptions.RequestException as e:
            # Handle exceptions, e.g., connection errors
            print(f"Error: {e}")
            return None

    def custom_function(self, name_of_cust_func):
        url = self.powercode_management_url + ':444/api/1/index.php'

        data = {
            "apiKey": self.powercode_api_key,
            "action": name_of_cust_func,
        }

        try:
            response = requests.post(url, data, verify=False)
            response.raise_for_status()

            return response.json()
        except requests.exceptions.RequestException as e:
            # Handle exceptions, e.g., connection errors
            print(f"Error: {e}")
            return None
